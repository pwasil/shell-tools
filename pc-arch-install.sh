#!/bin/bash

# Set variables
source ./pc-arch-install.conf

# Check if all args are set
[[ ! -b "${block_device_name}" ]] && echo '[err] missing or incorrect device name' && exit 1

# Hard erase the device, if selected
if [[ "${hard_erase_device}" == "yes" ]]; then
    dd if=/dev/urandom of="${block_device_name}" bs=4M status=progress
    dd if=/dev/urandom of="${block_device_name}" bs=4M status=progress
fi

# Partition disk
sfdisk "${block_device_name}" << EOF
label: gpt
type=1, size=256M
type=31
EOF

# Refresh partition table
partprobe --summary

# Encrypt and open encrypted disk
echo "${luks_password}" | cryptsetup luksFormat "${block_device_name}2"
echo "${luks_password}" | cryptsetup open "${block_device_name}2" "${crypt_vol_name}"

# Create LVM
pvcreate /dev/mapper/"${crypt_vol_name}" --yes
vgcreate "${root_vg_name}" /dev/mapper/"${crypt_vol_name}" --yes
lvcreate --size "32G" --name "rootlv" "${root_vg_name}" --yes
lvcreate --size "8G" --name "swaplv" "${root_vg_name}" --yes
lvcreate --extents "100%FREE" --name "homelv" "${root_vg_name}" --yes

# Create and mount filesystems
mkfs.ext4 /dev/mapper/"${root_vg_name}"-rootlv && mount /dev/mapper/"${root_vg_name}"-rootlv /mnt
mkfs.ext4 /dev/mapper/"${root_vg_name}"-homelv && mkdir /mnt/home && mount /dev/mapper/"${root_vg_name}"-homelv /mnt/home
mkfs.vfat "${block_device_name}"1 && mkdir /mnt/boot && mount "${block_device_name}"1 /mnt/boot
mkswap /dev/mapper/"${root_vg_name}"-swaplv

# Install packages
pacstrap /mnt base base-devel sudo grub efibootmgr openssh python

# Set hostname
echo "${host_name}" > /mnt/etc/hostname

# Write fstab file
echo "# Generated by installer script" > "${file_etc_fstab}"
echo "/dev/mapper/${root_vg_name}-rootlv / ext4 defaults 0 1" >> "${file_etc_fstab}"
echo "/dev/mapper/${root_vg_name}-swaplv none swap defaults 0 0" >> "${file_etc_fstab}"
echo "/dev/mapper/${root_vg_name}-homelv /home ext4 defaults 0 0" >> "${file_etc_fstab}"
echo "${block_device_name}1 /boot vfat defaults 0 2" >> "${file_etc_fstab}"

# Configure initramfs
echo '# Generated by installer script' > "${file_mkinitcpio_conf}"
echo 'MODULES="i915"' >> "${file_mkinitcpio_conf}"
echo 'BINARIES=""' >> "${file_mkinitcpio_conf}"
echo 'FILES=""' >> "${file_mkinitcpio_conf}"
echo 'HOOKS="base udev autodetect keyboard keymap consolefont modconf block encrypt lvm2 filesystems fsck"' >> "${file_mkinitcpio_conf}"

# Configure GRUB
echo '# Generated by installer script' > "${file_default_grub}"
echo 'GRUB_DEFAULT=0' >> "${file_default_grub}"
echo 'GRUB_TIMEOUT=3' >> "${file_default_grub}"
echo 'GRUB_DISTRIBUTOR="Arch"' >> "${file_default_grub}"
echo "GRUB_CMDLINE_LINUX_DEFAULT=\"cryptdevice=${block_device_name}2:${crypt_vol_name}\"" >> "${file_default_grub}"
echo 'GRUB_CMDLINE_LINUX=""' >> "${file_default_grub}"
echo 'GRUB_PRELOAD_MODULES="part_gpt part_msdos"' >> "${file_default_grub}"

# Generate initramfs
arch-chroot /mnt mkinitcpio --preset linux

# Install grub in UEFI mode
arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
arch-chroot /mnt grub-mkconfig --output=/boot/grub/grub.cfg

# Configure sudoers
echo '# Generated by installer script' > "/mnt/etc/sudoers"
echo 'root ALL=(ALL) ALL' >> "/mnt/etc/sudoers"
echo '%sudo	ALL=(ALL) ALL' >> "/mnt/etc/sudoers"
echo '%wheel ALL=(ALL) ALL' >> "/mnt/etc/sudoers"
echo '%ansible ALL=(ALL) ALL' >> "/mnt/etc/sudoers"

# Create default user account
useradd --root "/mnt" \
        --create-home \
        --user-group \
        --system \
        --uid "${default_user_uid}" \
        --comment "${default_user_comment}" \
        "${default_user_name}"

# Exit
exit 0